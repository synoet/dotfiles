Directory structure:
‚îî‚îÄ‚îÄ nvim/
    ‚îú‚îÄ‚îÄ README.md
    ‚îú‚îÄ‚îÄ init.lua
    ‚îú‚îÄ‚îÄ lazy-lock.json
    ‚îú‚îÄ‚îÄ lazyvim.json
    ‚îú‚îÄ‚îÄ neovim.yml
    ‚îú‚îÄ‚îÄ selene.toml
    ‚îú‚îÄ‚îÄ .neoconf.json
    ‚îú‚îÄ‚îÄ .stylua.toml
    ‚îî‚îÄ‚îÄ lua/
        ‚îú‚îÄ‚îÄ community.lua
        ‚îú‚îÄ‚îÄ lazy_setup.lua
        ‚îú‚îÄ‚îÄ polish.lua
        ‚îî‚îÄ‚îÄ plugins/
            ‚îú‚îÄ‚îÄ astrocore.lua
            ‚îú‚îÄ‚îÄ astrolsp.lua
            ‚îú‚îÄ‚îÄ astroui.lua
            ‚îú‚îÄ‚îÄ conflict.lua
            ‚îú‚îÄ‚îÄ egrepify.lua
            ‚îú‚îÄ‚îÄ gruvbox.lua
            ‚îú‚îÄ‚îÄ lush.lua
            ‚îú‚îÄ‚îÄ mason.lua
            ‚îú‚îÄ‚îÄ multi-cursor.lua
            ‚îú‚îÄ‚îÄ none-ls.lua
            ‚îú‚îÄ‚îÄ shipwright.lua
            ‚îú‚îÄ‚îÄ treesitter.lua
            ‚îî‚îÄ‚îÄ user.lua

================================================
File: README.md
================================================
# AstroNvim Template

**NOTE:** This is for AstroNvim v4+

A template for getting started with [AstroNvim](https://github.com/AstroNvim/AstroNvim)

## üõ†Ô∏è Installation

#### Make a backup of your current nvim and shared folder

```shell
mv ~/.config/nvim ~/.config/nvim.bak
mv ~/.local/share/nvim ~/.local/share/nvim.bak
mv ~/.local/state/nvim ~/.local/state/nvim.bak
mv ~/.cache/nvim ~/.cache/nvim.bak
```

#### Create a new user repository from this template

Press the "Use this template" button above to create a new repository to store your user configuration.

You can also just clone this repository directly if you do not want to track your user configuration in GitHub.

#### Clone the repository

```shell
git clone https://github.com/<your_user>/<your_repository> ~/.config/nvim
```

#### Start Neovim

```shell
nvim
```



================================================
File: init.lua
================================================
-- This file simply bootstraps the installation of Lazy.nvim and then calls other files for execution
-- This file doesn't necessarily need to be touched, BE CAUTIOUS editing this file and proceed at your own risk.
local lazypath = vim.env.LAZY or vim.fn.stdpath "data" .. "/lazy/lazy.nvim"
if not (vim.env.LAZY or (vim.uv or vim.loop).fs_stat(lazypath)) then
  -- stylua: ignore
  vim.fn.system({ "git", "clone", "--filter=blob:none", "https://github.com/folke/lazy.nvim.git", "--branch=stable", lazypath })
end
vim.opt.rtp:prepend(lazypath)

-- validate that lazy is available
if not pcall(require, "lazy") then
  -- stylua: ignore
  vim.api.nvim_echo({ { ("Unable to load lazy from: %s\n"):format(lazypath), "ErrorMsg" }, { "Press any key to exit...", "MoreMsg" } }, true, {})
  vim.fn.getchar()
  vim.cmd.quit()
end

require "lazy_setup"
require "polish"



================================================
File: lazy-lock.json
================================================
{
  "AstroNvim": { "branch": "main", "commit": "c5e610f614e74c9dd9bf11760c4d0ad2c98c0abe" },
  "Comment.nvim": { "branch": "master", "commit": "e30b7f2008e52442154b66f7c519bfd2f1e32acb" },
  "LuaSnip": { "branch": "master", "commit": "03c8e67eb7293c404845b3982db895d59c0d1538" },
  "aerial.nvim": { "branch": "master", "commit": "3284a2cb858ba009c79da87d5e010ccee3c99c4d" },
  "alpha-nvim": { "branch": "main", "commit": "de72250e054e5e691b9736ee30db72c65d560771" },
  "astrocommunity": { "branch": "main", "commit": "d451f1d8e90e21c0cad730add858d8f952c66f01" },
  "astrocore": { "branch": "main", "commit": "44a3dc0bf1591022b2a6bc89dccdfac1be17bec9" },
  "astrolsp": { "branch": "main", "commit": "909fbe64f3f87d089ff3777751261544557117cc" },
  "astrotheme": { "branch": "main", "commit": "f12dcf64b1f9a05839c3ac2146f550f43bae9dab" },
  "astroui": { "branch": "main", "commit": "e923a84c488d879a260fc9cfb2dc27dd870fb6ac" },
  "before.nvim": { "branch": "master", "commit": "187bafe2792a82d53cdb632971e4113cd703ac53" },
  "better-escape.nvim": { "branch": "master", "commit": "199dcc2643dec5d8dbdab4ec672cf405224dcb3b" },
  "catppuccin": { "branch": "main", "commit": "82f3dcedc9acc242d2d4f98abca02e2f10a75248" },
  "cmp-buffer": { "branch": "main", "commit": "3022dbc9166796b644a841a02de8dd1cc1d311fa" },
  "cmp-dap": { "branch": "master", "commit": "ea92773e84c0ad3288c3bc5e452ac91559669087" },
  "cmp-nvim-lsp": { "branch": "main", "commit": "99290b3ec1322070bcfb9e846450a46f6efa50f0" },
  "cmp-path": { "branch": "main", "commit": "91ff86cd9c29299a64f968ebb45846c485725f23" },
  "cmp_luasnip": { "branch": "master", "commit": "98d9cb5c2c38532bd9bdb481067b20fea8f32e90" },
  "dressing.nvim": { "branch": "master", "commit": "3a45525bb182730fe462325c99395529308f431e" },
  "friendly-snippets": { "branch": "main", "commit": "efff286dd74c22f731cdec26a70b46e5b203c619" },
  "git-blame.nvim": { "branch": "master", "commit": "8503b199edf9a666fe7b1a989cf14e3c26b2eb03" },
  "git-conflict.nvim": { "branch": "main", "commit": "4bbfdd92d547d2862a75b4e80afaf30e73f7bbb4" },
  "gitsigns.nvim": { "branch": "main", "commit": "7010000889bfb6c26065e0b0f7f1e6aa9163edd9" },
  "grug-far.nvim": { "branch": "main", "commit": "45981a9af7f4e666a3cdaedb1d21d2ab926727a2" },
  "gruvbox.nvim": { "branch": "main", "commit": "58a2cda2e953a99e2f87c12b7fb4602da4e0709c" },
  "guess-indent.nvim": { "branch": "main", "commit": "6cd61f7a600bb756e558627cd2e740302c58e32d" },
  "heirline.nvim": { "branch": "master", "commit": "fae936abb5e0345b85c3a03ecf38525b0828b992" },
  "hop.nvim": { "branch": "master", "commit": "9c6a1dd9afb53a112b128877ccd583a1faa0b8b6" },
  "indent-blankline.nvim": { "branch": "master", "commit": "005b56001b2cb30bfa61b7986bc50657816ba4ba" },
  "lazy.nvim": { "branch": "main", "commit": "6c3bda4aca61a13a9c63f1c1d1b16b9d3be90d7a" },
  "lazydev.nvim": { "branch": "main", "commit": "f59bd14a852ca43db38e3662395354cb2a9b13e0" },
  "lsp_signature.nvim": { "branch": "master", "commit": "c909a01eb923101c76a57fd2187835e9013ab59a" },
  "lspkind.nvim": { "branch": "master", "commit": "d79a1c3299ad0ef94e255d045bed9fa26025dab6" },
  "lush.nvim": { "branch": "main", "commit": "45a79ec4acb5af783a6a29673a999ce37f00497e" },
  "mason-lspconfig.nvim": { "branch": "main", "commit": "1a31f824b9cd5bc6f342fc29e9a53b60d74af245" },
  "mason-null-ls.nvim": { "branch": "main", "commit": "2b8433f76598397fcc97318d410e0c4f7a4bea6a" },
  "mason-nvim-dap.nvim": { "branch": "main", "commit": "4c2cdc69d69fe00c15ae8648f7e954d99e5de3ea" },
  "mason.nvim": { "branch": "main", "commit": "fc98833b6da5de5a9c5b1446ac541577059555be" },
  "mini.bufremove": { "branch": "main", "commit": "285bdac9596ee7375db50c0f76ed04336dcd2685" },
  "multicursor.nvim": { "branch": "1.0", "commit": "9eedebdd395bbbc4711081e33b0606c079e054c3" },
  "neo-tree.nvim": { "branch": "main", "commit": "cea666ef965884414b1b71f6b39a537f9238bdb2" },
  "neoconf.nvim": { "branch": "main", "commit": "f630568a4d04154803886f21ca60923f12709f0f" },
  "none-ls.nvim": { "branch": "main", "commit": "a117163db44c256d53c3be8717f3e1a2a28e6299" },
  "nui.nvim": { "branch": "main", "commit": "a0fd35fcbb4cb479366f1dc5f20145fd718a3733" },
  "nvim-autopairs": { "branch": "master", "commit": "68f0e5c3dab23261a945272032ee6700af86227a" },
  "nvim-cmp": { "branch": "main", "commit": "1e1900b0769324a9675ef85b38f99cca29e203b3" },
  "nvim-colorizer.lua": { "branch": "master", "commit": "517df88cf2afb36652830df2c655df2da416a0ae" },
  "nvim-dap": { "branch": "master", "commit": "6a5bba0ddea5d419a783e170c20988046376090d" },
  "nvim-dap-ui": { "branch": "master", "commit": "bc81f8d3440aede116f821114547a476b082b319" },
  "nvim-lsp-file-operations": { "branch": "master", "commit": "9744b738183a5adca0f916527922078a965515ed" },
  "nvim-lspconfig": { "branch": "master", "commit": "185b2af444b27d6541c02d662b5b68190e5cf0c4" },
  "nvim-nio": { "branch": "master", "commit": "21f5324bfac14e22ba26553caf69ec76ae8a7662" },
  "nvim-notify": { "branch": "master", "commit": "a3020c2cf4dfc4c4f390c4a21e84e35e46cf5d17" },
  "nvim-treesitter": { "branch": "master", "commit": "f8aaf5ce4e27cd20de917946b2ae5c968a2c2858" },
  "nvim-treesitter-textobjects": { "branch": "master", "commit": "9937e5e356e5b227ec56d83d0a9d0a0f6bc9cad4" },
  "nvim-ts-autotag": { "branch": "main", "commit": "a1d526af391f6aebb25a8795cbc05351ed3620b5" },
  "nvim-ts-context-commentstring": { "branch": "main", "commit": "1b212c2eee76d787bbea6aa5e92a2b534e7b4f8f" },
  "nvim-ufo": { "branch": "main", "commit": "61463090a4f55f5d080236ea62f09d1cd8976ff3" },
  "nvim-vtsls": { "branch": "main", "commit": "0b5f73c9e50ce95842ea07bb3f05c7d66d87d14a" },
  "nvim-web-devicons": { "branch": "master", "commit": "4c3a5848ee0b09ecdea73adcd2a689190aeb728c" },
  "nvim-window-picker": { "branch": "main", "commit": "6382540b2ae5de6c793d4aa2e3fe6dbb518505ec" },
  "onedark.nvim": { "branch": "master", "commit": "11de4da47f3e69cb70c3ae9816bd8af166cbe121" },
  "package-info.nvim": { "branch": "master", "commit": "4f1b8287dde221153ec9f2acd46e8237d2d0881e" },
  "plenary.nvim": { "branch": "master", "commit": "857c5ac632080dba10aae49dba902ce3abf91b35" },
  "promise-async": { "branch": "main", "commit": "38a4575da9497326badd3995e768b4ccf0bb153e" },
  "resession.nvim": { "branch": "master", "commit": "cc819b0489938d03e4f3532a583354f0287c015b" },
  "shipwright.nvim": { "branch": "master", "commit": "e596ab48328c31873f4f4d2e070243bf9de16ff3" },
  "smart-splits.nvim": { "branch": "master", "commit": "ddb23c1a1cf1507bda487cda7f6e4690965ef9f5" },
  "sqlite.lua": { "branch": "master", "commit": "50092d60feb242602d7578398c6eb53b4a8ffe7b" },
  "supermaven-nvim": { "branch": "main", "commit": "07d20fce48a5629686aefb0a7cd4b25e33947d50" },
  "telescope-egrepify.nvim": { "branch": "master", "commit": "a8070970a661330c4e00450d25f874f6c2b00af9" },
  "telescope-fzf-native.nvim": { "branch": "main", "commit": "1f08ed60cafc8f6168b72b80be2b2ea149813e55" },
  "telescope.nvim": { "branch": "master", "commit": "a17d611a0e111836a1db5295f04945df407c5135" },
  "todo-comments.nvim": { "branch": "main", "commit": "ae0a2afb47cf7395dc400e5dc4e05274bf4fb9e0" },
  "toggleterm.nvim": { "branch": "main", "commit": "50ea089fc548917cc3cc16b46a8211833b9e3c7c" },
  "trouble.nvim": { "branch": "main", "commit": "85bedb7eb7fa331a2ccbecb9202d8abba64d37b3" },
  "tsc.nvim": { "branch": "main", "commit": "8c1b4ec6a48d038a79ced8674cb15e7db6dd8ef0" },
  "vim-illuminate": { "branch": "master", "commit": "19cb21f513fc2b02f0c66be70107741e837516a1" },
  "which-key.nvim": { "branch": "main", "commit": "fcbf4eea17cb299c02557d576f0d568878e354a4" },
  "yanky.nvim": { "branch": "main", "commit": "04775cc6e10ef038c397c407bc17f00a2f52b378" }
}



================================================
File: lazyvim.json
================================================

return {
    "catppuccin/nvim",
    name = "catppuccin",
    lazy = false,
    priority = 1000,
    config = function()
        require("catppuccin").setup({
            background = {
                light = "latte",
                dark = "mocha",
            },
            color_overrides = {
                latte = {
                    rosewater = "#c14a4a",
                    flamingo = "#c14a4a",
                    red = "#c14a4a",
                    maroon = "#c14a4a",
                    pink = "#945e80",
                    mauve = "#945e80",
                    peach = "#c35e0a",
                    yellow = "#b47109",
                    green = "#6c782e",
                    teal = "#4c7a5d",
                    sky = "#4c7a5d",
                    sapphire = "#4c7a5d",
                    blue = "#45707a",
                    lavender = "#45707a",
                    text = "#654735",
                    subtext1 = "#73503c",
                    subtext0 = "#805942",
                    overlay2 = "#8c6249",
                    overlay1 = "#8c856d",
                    overlay0 = "#a69d81",
                    surface2 = "#bfb695",
                    surface1 = "#d1c7a3",
                    surface0 = "#e3dec3",
                    base = "#f9f5d7",
                    mantle = "#f0ebce",
                    crust = "#e8e3c8",
                },
                mocha = {
                    rosewater = "#ea6962",
                    flamingo = "#ea6962",
                    red = "#ea6962",
                    maroon = "#ea6962",
                    pink = "#d3869b",
                    mauve = "#d3869b",
                    peach = "#e78a4e",
                    yellow = "#d8a657",
                    green = "#a9b665",
                    teal = "#89b482",
                    sky = "#89b482",
                    sapphire = "#89b482",
                    blue = "#7daea3",
                    lavender = "#7daea3",
                    text = "#ebdbb2",
                    subtext1 = "#d5c4a1",
                    subtext0 = "#bdae93",
                    overlay2 = "#a89984",
                    overlay1 = "#928374",
                    overlay0 = "#595959",
                    surface2 = "#4d4d4d",
                    surface1 = "#404040",
                    surface0 = "#292929",
                    base = "#1d2021",
                    mantle = "#191b1c",
                    crust = "#141617",
                },
            },
            transparent_background = false,
            show_end_of_buffer = false,
            integration_default = false,
            integrations = {
                barbecue = { dim_dirname = true, bold_basename = true, dim_context = false, alt_background = false },
                cmp = true,
                gitsigns = true,
                hop = true,
                illuminate = { enabled = true },
                native_lsp = { enabled = true, inlay_hints = { background = true } },
                neogit = true,
                neotree = true,
                semantic_tokens = true,
                treesitter = true,
                treesitter_context = true,
                vimwiki = true,
                which_key = true,
            },
            highlight_overrides = {
                all = function(colors)
                    return {
                        CmpItemMenu = { fg = colors.surface2 },
                        CursorLineNr = { fg = colors.text },
                        FloatBorder = { bg = colors.base, fg = colors.surface0 },
                        GitSignsChange = { fg = colors.peach },
                        LineNr = { fg = colors.overlay0 },
                        LspInfoBorder = { link = "FloatBorder" },
                        NeoTreeDirectoryIcon = { fg = colors.subtext1 },
                        NeoTreeDirectoryName = { fg = colors.subtext1 },
                        NeoTreeFloatBorder = { link = "TelescopeResultsBorder" },
                        NeoTreeGitConflict = { fg = colors.red },
                        NeoTreeGitDeleted = { fg = colors.red },
                        NeoTreeGitIgnored = { fg = colors.overlay0 },
                        NeoTreeGitModified = { fg = colors.peach },
                        NeoTreeGitStaged = { fg = colors.green },
                        NeoTreeGitUnstaged = { fg = colors.red },
                        NeoTreeGitUntracked = { fg = colors.green },
                        NeoTreeIndent = { fg = colors.surface1 },
                        NeoTreeNormal = { bg = colors.mantle },
                        NeoTreeNormalNC = { bg = colors.mantle },
                        NeoTreeRootName = { fg = colors.subtext1, style = { "bold" } },
                        NeoTreeTabActive = { fg = colors.text, bg = colors.mantle },
                        NeoTreeTabInactive = { fg = colors.surface2, bg = colors.crust },
                        NeoTreeTabSeparatorActive = { fg = colors.mantle, bg = colors.mantle },
                        NeoTreeTabSeparatorInactive = { fg = colors.crust, bg = colors.crust },
                        NeoTreeWinSeparator = { fg = colors.base, bg = colors.base },
                        NormalFloat = { bg = colors.base },
                        Pmenu = { bg = colors.mantle, fg = "" },
                        PmenuSel = { bg = colors.surface0, fg = "" },
                        TelescopePreviewBorder = { bg = colors.crust, fg = colors.crust },
                        TelescopePreviewNormal = { bg = colors.crust },
                        TelescopePreviewTitle = { fg = colors.crust, bg = colors.crust },
                        TelescopePromptBorder = { bg = colors.surface0, fg = colors.surface0 },
                        TelescopePromptCounter = { fg = colors.mauve, style = { "bold" } },
                        TelescopePromptNormal = { bg = colors.surface0 },
                        TelescopePromptPrefix = { bg = colors.surface0 },
                        TelescopePromptTitle = { fg = colors.surface0, bg = colors.surface0 },
                        TelescopeResultsBorder = { bg = colors.mantle, fg = colors.mantle },
                        TelescopeResultsNormal = { bg = colors.mantle },
                        TelescopeResultsTitle = { fg = colors.mantle, bg = colors.mantle },
                        TelescopeSelection = { bg = colors.surface0 },
                        VertSplit = { bg = colors.base, fg = colors.surface0 },
                        WhichKeyFloat = { bg = colors.mantle },
                        YankHighlight = { bg = colors.surface2 },
                        FidgetTask = { fg = colors.subtext2 },
                        FidgetTitle = { fg = colors.peach },

                        IblIndent = { fg = colors.surface0 },
                        IblScope = { fg = colors.overlay0 },

                        Boolean = { fg = colors.mauve },
                        Number = { fg = colors.mauve },
                        Float = { fg = colors.mauve },

                        PreProc = { fg = colors.mauve },
                        PreCondit = { fg = colors.mauve },
                        Include = { fg = colors.mauve },
                        Define = { fg = colors.mauve },
                        Conditional = { fg = colors.red },
                        Repeat = { fg = colors.red },
                        Keyword = { fg = colors.red },
                        Typedef = { fg = colors.red },
                        Exception = { fg = colors.red },
                        Statement = { fg = colors.red },

                        Error = { fg = colors.red },
                        StorageClass = { fg = colors.peach },
                        Tag = { fg = colors.peach },
                        Label = { fg = colors.peach },
                        Structure = { fg = colors.peach },
                        Operator = { fg = colors.peach },
                        Title = { fg = colors.peach },
                        Special = { fg = colors.yellow },
                        SpecialChar = { fg = colors.yellow },
                        Type = { fg = colors.yellow, style = { "bold" } },
                        Function = { fg = colors.green, style = { "bold" } },
                        Delimiter = { fg = colors.subtext2 },
                        Ignore = { fg = colors.subtext2 },
                        Macro = { fg = colors.teal },

                        TSAnnotation = { fg = colors.mauve },
                        TSAttribute = { fg = colors.mauve },
                        TSBoolean = { fg = colors.mauve },
                        TSCharacter = { fg = colors.teal },
                        TSCharacterSpecial = { link = "SpecialChar" },
                        TSComment = { link = "Comment" },
                        TSConditional = { fg = colors.red },
                        TSConstBuiltin = { fg = colors.mauve },
                        TSConstMacro = { fg = colors.mauve },
                        TSConstant = { fg = colors.text },
                        TSConstructor = { fg = colors.green },
                        TSDebug = { link = "Debug" },
                        TSDefine = { link = "Define" },
                        TSEnvironment = { link = "Macro" },
                        TSEnvironmentName = { link = "Type" },
                        TSError = { link = "Error" },
                        TSException = { fg = colors.red },
                        TSField = { fg = colors.blue },
                        TSFloat = { fg = colors.mauve },
                        TSFuncBuiltin = { fg = colors.green },
                        TSFuncMacro = { fg = colors.green },
                        TSFunction = { fg = colors.green },
                        TSFunctionCall = { fg = colors.green },
                        TSInclude = { fg = colors.red },
                        TSKeyword = { fg = colors.red },
                        TSKeywordFunction = { fg = colors.red },
                        TSKeywordOperator = { fg = colors.peach },
                        TSKeywordReturn = { fg = colors.red },
                        TSLabel = { fg = colors.peach },
                        TSLiteral = { link = "String" },
                        TSMath = { fg = colors.blue },
                        TSMethod = { fg = colors.green },
                        TSMethodCall = { fg = colors.green },
                        TSNamespace = { fg = colors.yellow },
                        TSNone = { fg = colors.text },
                        TSNumber = { fg = colors.mauve },
                        TSOperator = { fg = colors.peach },
                        TSParameter = { fg = colors.text },
                        TSParameterReference = { fg = colors.text },
                        TSPreProc = { link = "PreProc" },
                        TSProperty = { fg = colors.blue },
                        TSPunctBracket = { fg = colors.text },
                        TSPunctDelimiter = { link = "Delimiter" },
                        TSPunctSpecial = { fg = colors.blue },
                        TSRepeat = { fg = colors.red },
                        TSStorageClass = { fg = colors.peach },
                        TSStorageClassLifetime = { fg = colors.peach },
                        TSStrike = { fg = colors.subtext2 },
                        TSString = { fg = colors.teal },
                        TSStringEscape = { fg = colors.green },
                        TSStringRegex = { fg = colors.green },
                        TSStringSpecial = { link = "SpecialChar" },
                        TSSymbol = { fg = colors.text },
                        TSTag = { fg = colors.peach },
                        TSTagAttribute = { fg = colors.green },
                        TSTagDelimiter = { fg = colors.green },
                        TSText = { fg = colors.green },
                        TSTextReference = { link = "Constant" },
                        TSTitle = { link = "Title" },
                        TSTodo = { link = "Todo" },
                        TSType = { fg = colors.yellow, style = { "bold" } },
                        TSTypeBuiltin = { fg = colors.yellow, style = { "bold" } },
                        TSTypeDefinition = { fg = colors.yellow, style = { "bold" } },
                        TSTypeQualifier = { fg = colors.peach, style = { "bold" } },
                        TSURI = { fg = colors.blue },
                        TSVariable = { fg = colors.text },
                        TSVariableBuiltin = { fg = colors.mauve },

                        ["@annotation"] = { link = "TSAnnotation" },
                        ["@attribute"] = { link = "TSAttribute" },
                        ["@boolean"] = { link = "TSBoolean" },
                        ["@character"] = { link = "TSCharacter" },
                        ["@character.special"] = { link = "TSCharacterSpecial" },
                        ["@comment"] = { link = "TSComment" },
                        ["@conceal"] = { link = "Grey" },
                        ["@conditional"] = { link = "TSConditional" },
                        ["@constant"] = { link = "TSConstant" },
                        ["@constant.builtin"] = { link = "TSConstBuiltin" },
                        ["@constant.macro"] = { link = "TSConstMacro" },
                        ["@constructor"] = { link = "TSConstructor" },
                        ["@debug"] = { link = "TSDebug" },
                        ["@define"] = { link = "TSDefine" },
                        ["@error"] = { link = "TSError" },
                        ["@exception"] = { link = "TSException" },
                        ["@field"] = { link = "TSField" },
                        ["@float"] = { link = "TSFloat" },
                        ["@function"] = { link = "TSFunction" },
                        ["@function.builtin"] = { link = "TSFuncBuiltin" },
                        ["@function.call"] = { link = "TSFunctionCall" },
                        ["@function.macro"] = { link = "TSFuncMacro" },
                        ["@include"] = { link = "TSInclude" },
                        ["@keyword"] = { link = "TSKeyword" },
                        ["@keyword.function"] = { link = "TSKeywordFunction" },
                        ["@keyword.operator"] = { link = "TSKeywordOperator" },
                        ["@keyword.return"] = { link = "TSKeywordReturn" },
                        ["@label"] = { link = "TSLabel" },
                        ["@math"] = { link = "TSMath" },
                        ["@method"] = { link = "TSMethod" },
                        ["@method.call"] = { link = "TSMethodCall" },
                        ["@namespace"] = { link = "TSNamespace" },
                        ["@none"] = { link = "TSNone" },
                        ["@number"] = { link = "TSNumber" },
                        ["@operator"] = { link = "TSOperator" },
                        ["@parameter"] = { link = "TSParameter" },
                        ["@parameter.reference"] = { link = "TSParameterReference" },
                        ["@preproc"] = { link = "TSPreProc" },
                        ["@property"] = { link = "TSProperty" },
                        ["@punctuation.bracket"] = { link = "TSPunctBracket" },
                        ["@punctuation.delimiter"] = { link = "TSPunctDelimiter" },
                        ["@punctuation.special"] = { link = "TSPunctSpecial" },
                        ["@repeat"] = { link = "TSRepeat" },
                        ["@storageclass"] = { link = "TSStorageClass" },
                        ["@storageclass.lifetime"] = { link = "TSStorageClassLifetime" },
                        ["@strike"] = { link = "TSStrike" },
                        ["@string"] = { link = "TSString" },
                        ["@string.escape"] = { link = "TSStringEscape" },
                        ["@string.regex"] = { link = "TSStringRegex" },
                        ["@string.special"] = { link = "TSStringSpecial" },
                        ["@symbol"] = { link = "TSSymbol" },
                        ["@tag"] = { link = "TSTag" },
                        ["@tag.attribute"] = { link = "TSTagAttribute" },
                        ["@tag.delimiter"] = { link = "TSTagDelimiter" },
                        ["@text"] = { link = "TSText" },
                        ["@text.danger"] = { link = "TSDanger" },
                        ["@text.diff.add"] = { link = "diffAdded" },
                        ["@text.diff.delete"] = { link = "diffRemoved" },
                        ["@text.emphasis"] = { link = "TSEmphasis" },
                        ["@text.environment"] = { link = "TSEnvironment" },
                        ["@text.environment.name"] = { link = "TSEnvironmentName" },
                        ["@text.literal"] = { link = "TSLiteral" },
                        ["@text.math"] = { link = "TSMath" },
                        ["@text.note"] = { link = "TSNote" },
                        ["@text.reference"] = { link = "TSTextReference" },
                        ["@text.strike"] = { link = "TSStrike" },
                        ["@text.strong"] = { link = "TSStrong" },
                        ["@text.title"] = { link = "TSTitle" },
                        ["@text.todo"] = { link = "TSTodo" },
                        ["@text.todo.checked"] = { link = "Green" },
                        ["@text.todo.unchecked"] = { link = "Ignore" },
                        ["@text.underline"] = { link = "TSUnderline" },
                        ["@text.uri"] = { link = "TSURI" },
                        ["@text.warning"] = { link = "TSWarning" },
                        ["@todo"] = { link = "TSTodo" },
                        ["@type"] = { link = "TSType" },
                        ["@type.builtin"] = { link = "TSTypeBuiltin" },
                        ["@type.definition"] = { link = "TSTypeDefinition" },
                        ["@type.qualifier"] = { link = "TSTypeQualifier" },
                        ["@uri"] = { link = "TSURI" },
                        ["@variable"] = { link = "TSVariable" },
                        ["@variable.builtin"] = { link = "TSVariableBuiltin" },

                        ["@lsp.type.class"] = { link = "TSType" },
                        ["@lsp.type.comment"] = { link = "TSComment" },
                        ["@lsp.type.decorator"] = { link = "TSFunction" },
                        ["@lsp.type.enum"] = { link = "TSType" },
                        ["@lsp.type.enumMember"] = { link = "TSProperty" },
                        ["@lsp.type.events"] = { link = "TSLabel" },
                        ["@lsp.type.function"] = { link = "TSFunction" },
                        ["@lsp.type.interface"] = { link = "TSType" },
                        ["@lsp.type.keyword"] = { link = "TSKeyword" },
                        ["@lsp.type.macro"] = { link = "TSConstMacro" },
                        ["@lsp.type.method"] = { link = "TSMethod" },
                        ["@lsp.type.modifier"] = { link = "TSTypeQualifier" },
                        ["@lsp.type.namespace"] = { link = "TSNamespace" },
                        ["@lsp.type.number"] = { link = "TSNumber" },
                        ["@lsp.type.operator"] = { link = "TSOperator" },
                        ["@lsp.type.parameter"] = { link = "TSParameter" },
                        ["@lsp.type.property"] = { link = "TSProperty" },
                        ["@lsp.type.regexp"] = { link = "TSStringRegex" },
                        ["@lsp.type.string"] = { link = "TSString" },
                        ["@lsp.type.struct"] = { link = "TSType" },
                        ["@lsp.type.type"] = { link = "TSType" },
                        ["@lsp.type.typeParameter"] = { link = "TSTypeDefinition" },
                        ["@lsp.type.variable"] = { link = "TSVariable" },
                    }
                end,
                latte = function(colors)
                    return {
                        IblIndent = { fg = colors.mantle },
                        IblScope = { fg = colors.surface1 },

                        LineNr = { fg = colors.surface1 },
                    }
                end,
            },
        })

        vim.api.nvim_command("colorscheme catppuccin")
    end,
}



================================================
File: neovim.yml
================================================
---
base: lua51

globals:
  vim:
    any: true



================================================
File: selene.toml
================================================
std = "neovim"

[rules]
global_usage = "allow"
if_same_then_else = "allow"
incorrect_standard_library_use = "allow"
mixed_table = "allow"
multiple_statements = "allow"



================================================
File: .neoconf.json
================================================
{
  "neodev": {
    "library": {
      "enabled": true,
      "plugins": true
    }
  },
  "neoconf": {
    "plugins": {
      "lua_ls": {
        "enabled": true
      }
    }
  },
  "lspconfig": {
    "lua_ls": {
      "Lua.format.enable": false
    }
  }
}



================================================
File: .stylua.toml
================================================
column_width = 120
line_endings = "Unix"
indent_type = "Spaces"
indent_width = 2
quote_style = "AutoPreferDouble"
call_parentheses = "None"
collapse_simple_statement = "Always"



================================================
File: lua/community.lua
================================================
---@type LazySpec
return {
  "AstroNvim/astrocommunity",
  { import = "astrocommunity.pack.lua" },
  { import = "astrocommunity.pack.typescript" },
  { import = "astrocommunity.motion.hop-nvim" },
  { import = "astrocommunity.completion.supermaven-nvim" },
  { import = "astrocommunity.motion.before-nvim" },
  { import = "astrocommunity.editing-support.yanky-nvim" },
  { import = "astrocommunity.git.git-blame-nvim" },
  { import = "astrocommunity.diagnostics.trouble-nvim" },
  { import = "astrocommunity.lsp.lsp-signature-nvim" },
  { import = "astrocommunity.search.grug-far-nvim" },
}



================================================
File: lua/lazy_setup.lua
================================================
require("lazy").setup({
  {
    "AstroNvim/AstroNvim",
    version = "^4", -- Remove version tracking to elect for nighly AstroNvim
    import = "astronvim.plugins",
    opts = { -- AstroNvim options must be set here with the `import` key
      mapleader = " ", -- This ensures the leader key must be configured before Lazy is set up
      maplocalleader = ",", -- This ensures the localleader key must be configured before Lazy is set up
      icons_enabled = true, -- Set to false to disable icons (if no Nerd Font is available)
      pin_plugins = nil, -- Default will pin plugins when tracking `version` of AstroNvim, set to true/false to override
      update_notifications = false, -- Enable/disable notification about running `:Lazy update` twice to update pinned plugins
    },
  },
  { import = "community" },
  { import = "plugins" },
} --[[@as LazySpec]], {
  -- Configure any other `lazy.nvim` configuration options here
  install = { colorscheme = { "astrotheme", "habamax" } },
  ui = { backdrop = 100 },
  performance = {
    rtp = {
      -- disable some rtp plugins, add more to your liking
      disabled_plugins = {
        "gzip",
        "netrwPlugin",
        "tarPlugin",
        "tohtml",
        "zipPlugin",
      },
    },
  },
} --[[@as LazyConfig]])



================================================
File: lua/polish.lua
================================================
if true then return end -- WARN: REMOVE THIS LINE TO ACTIVATE THIS FILE

-- This will run last in the setup process and is a good place to configure
-- things like custom filetypes. This just pure lua so anything that doesn't
-- fit in the normal config locations above can go here

-- Set up custom filetypes
vim.filetype.add {
  extension = {
    foo = "fooscript",
  },
  filename = {
    ["Foofile"] = "fooscript",
  },
  pattern = {
    ["~/%.config/foo/.*"] = "fooscript",
  },
}



================================================
File: lua/plugins/astrocore.lua
================================================
-- AstroCore provides a central place to modify mappings, vim options, autocommands, and more!
-- Configuration documentation can be found with `:h astrocore`
-- NOTE: We highly recommend setting up the Lua Language Server (`:LspInstall lua_ls`)
--       as this provides autocomplete and documentation while editing

---@type LazySpec
return {
  "AstroNvim/astrocore",
  ---@type AstroCoreOpts
  opts = {
    -- Configure core features of AstroNvim
    features = {
      large_buf = { size = 1024 * 256, lines = 10000 }, -- set global limits for large files for disabling features like treesitter
      autopairs = true, -- enable autopairs at start
      cmp = true, -- enable completion at start
      diagnostics_mode = 3, -- diagnostic mode on start (0 = off, 1 = no signs/virtual text, 2 = no virtual text, 3 = on)
      highlighturl = true, -- highlight URLs at start
      notifications = false, -- enable notifications at start
    },
    -- Diagnostics configuration (for vim.diagnostics.config({...})) when diagnostics are on
    diagnostics = {
      virtual_text = true,
      underline = true,
    },
    -- vim options can be configured here
    options = {
      opt = { -- vim.opt.<key>
        relativenumber = true, -- sets vim.opt.relativenumber
        number = true, -- sets vim.opt.number
        spell = false, -- sets vim.opt.spell
        signcolumn = "yes", -- sets vim.opt.signcolumn to yes
        wrap = false, -- sets vim.opt.wrap
      },
      g = { -- vim.g.<key>
        -- configure global vim variables (vim.g)
        -- NOTE: `mapleader` and `maplocalleader` must be set in the AstroNvim opts or before `lazy.setup`
        -- This can be found in the `lua/lazy_setup.lua` file
      },
    },
    -- Mappings can be configured through AstroCore as well.
    -- NOTE: keycodes follow the casing in the vimdocs. For example, `<Leader>` must be capitalized
    mappings = {
      -- first key is the mode
      v = {

        ["<BS>"] = { "<Esc>", desc = "Exit visual mode with backspace" },
      },
      n = {
        -- second key is the lefthand side of the map

        -- navigate buffer tabs
        ["<S-l>"] = { function() require("astrocore.buffer").nav(vim.v.count1) end, desc = "Next buffer" },
        ["<S-h>"] = { function() require("astrocore.buffer").nav(-vim.v.count1) end, desc = "Previous buffer" },

        -- mappings seen under group name "Buffer"
        ["<Leader>bd"] = {
          function()
            require("astroui.status.heirline").buffer_picker(
              function(bufnr) require("astrocore.buffer").close(bufnr) end
            )
          end,
          desc = "Close buffer from tabline",
        },

        -- tables with just a `desc` key will be registered with which-key if it's installed
        -- this is useful for naming menus
        -- ["<Leader>b"] = { desc = "Buffers" },

        -- setting a mapping to false will disable it
        -- ["<C-S>"] = false,
      },
    },
  },
}



================================================
File: lua/plugins/astrolsp.lua
================================================
---@type LazySpec
return {
  "AstroNvim/astrolsp",
  ---@type AstroLSPOpts
  opts = {
    -- Configuration table of features provided by AstroLSP
    features = {
      codelens = true, -- enable/disable codelens refresh on start
      inlay_hints = false, -- enable/disable inlay hints on start
      semantic_tokens = true, -- enable/disable semantic token highlighting
    },
    -- customize lsp formatting options
    formatting = {
      -- control auto formatting on save
      format_on_save = {
        enabled = false, -- enable or disable format on save globally
        allow_filetypes = { -- enable format on save for specified filetypes only
          -- "go",
        },
        ignore_filetypes = { -- disable format on save for specified filetypes
          "lua",
        },
      },
      disabled = { -- disable formatting capabilities for the listed language servers
        -- disable lua_ls formatting capability if you want to use StyLua to format your lua code
        -- "lua_ls",
      },
      timeout_ms = 1000, -- default format timeout
      -- filter = function(client) -- fully override the default formatting function
      --   return true
      -- end
    },
    -- enable servers that you already have installed without mason
    servers = {
      -- "pyright"
    },
    -- customize language server configuration options passed to `lspconfig`
    ---@diagnostic disable: missing-fields
    config = {
      rust_analyzer = {
        settings = {
          ["rust-analyzer"] = {
            checkOnSave = true,
            procMacro = {
              enable = true,
            },
            check = {
              command = "clippy",
            },
            diagnostics = {
              enable = true,
              experimental = {
                enable = true,
              },
              disabled = { "unresolved-proc-macro" },
            },
          },
        },
      },
    },
    -- customize how language servers are attached
    handlers = {
      -- a function without a key is simply the default handler, functions take two parameters, the server name and the configured options table for that server
      -- function(server, opts) require("lspconfig")[server].setup(opts) end

      -- the key is the server that is being setup with `lspconfig`
      -- rust_analyzer = false, -- setting a handler to false will disable the set up of that language server
      -- pyright = function(_, opts) require("lspconfig").pyright.setup(opts) end -- or a custom handler function can be passed
    },
    -- Configure buffer local auto commands to add when attaching a language server
    autocmds = {
      -- first key is the `augroup` to add the auto commands to (:h augroup)
      lsp_codelens_refresh = {
        -- Optional condition to create/delete auto command group
        -- can either be a string of a client capability or a function of `fun(client, bufnr): boolean`
        -- condition will be resolved for each client on each execution and if it ever fails for all clients,
        -- the auto commands will be deleted for that buffer
        cond = "textDocument/codeLens",
        -- cond = function(client, bufnr) return client.name == "lua_ls" end,
        -- list of auto commands to set
        {
          -- events to trigger
          event = { "InsertLeave", "BufEnter" },
          -- the rest of the autocmd options (:h nvim_create_autocmd)
          desc = "Refresh codelens (buffer)",
          callback = function(args)
            if require("astrolsp").config.features.codelens then vim.lsp.codelens.refresh { bufnr = args.buf } end
          end,
        },
      },
    },
    -- mappings to be set up on attaching of a language server
    mappings = {
      n = {
        -- a `cond` key can provided as the string of a server capability to be required to attach, or a function with `client` and `bufnr` parameters from the `on_attach` that returns a boolean
        gD = {
          function() vim.lsp.buf.declaration() end,
          desc = "Declaration of current symbol",
          cond = "textDocument/declaration",
        },
        ["<Leader>uY"] = {
          function() require("astrolsp.toggles").buffer_semantic_tokens() end,
          desc = "Toggle LSP semantic highlight (buffer)",
          cond = function(client)
            return client.supports_method "textDocument/semanticTokens/full" and vim.lsp.semantic_tokens ~= nil
          end,
        },
      },
    },
    -- A custom `on_attach` function to be run after the default `on_attach` function
    -- takes two parameters `client` and `bufnr`  (`:h lspconfig-setup`)
    on_attach = function(client, bufnr)
      -- this would disable semanticTokensProvider for all clients
      -- client.server_capabilities.semanticTokensProvider = nil
    end,
  },
}



================================================
File: lua/plugins/astroui.lua
================================================
-- AstroUI provides the basis for configuring the AstroNvim User Interface
-- Configuration documentation can be found with `:h astroui`
-- NOTE: We highly recommend setting up the Lua Language Server (`:LspInstall lua_ls`)
--       as this provides autocomplete and documentation while editing

---@type LazySpec
return {
  "AstroNvim/astroui",
  ---@type AstroUIOpts
  opts = {
    colorscheme = "gruvbox-material",
    -- AstroUI allows you to easily modify highlight groups easily for any and all colorschemes
    highlights = {
      init = { -- this table overrides highlights in all themes
        -- Normal = { bg = "#000000" },
      },
      astrodark = { -- a table of overrides/changes when applying the astrotheme theme
        -- Normal = { bg = "#000000" },
      },
    },
    -- Icons can be configured throughout the interface
    icons = {
      -- configure the loading of the lsp in the status line
      LSPLoading1 = "‚†ã",
      LSPLoading2 = "‚†ô",
      LSPLoading3 = "‚†π",
      LSPLoading4 = "‚†∏",
      LSPLoading5 = "‚†º",
      LSPLoading6 = "‚†¥",
      LSPLoading7 = "‚†¶",
      LSPLoading8 = "‚†ß",
      LSPLoading9 = "‚†á",
      LSPLoading10 = "‚†è",
    },
  },
}



================================================
File: lua/plugins/conflict.lua
================================================
return { "akinsho/git-conflict.nvim", version = "*", config = true }



================================================
File: lua/plugins/egrepify.lua
================================================
return {
    "fdschmidt93/telescope-egrepify.nvim",
    dependencies = { "nvim-telescope/telescope.nvim", "nvim-lua/plenary.nvim" }
}



================================================
File: lua/plugins/gruvbox.lua
================================================
return {
  "sainnhe/gruvbox-material",
  lazy = false,
  priority = 1000,
  config = function()
    vim.g.gruvbox_material_background = 'hard'
    vim.g.gruvbox_material_enable_italic = true
    vim.g.gruvbox_material_diagnostic_text_highlight = 1
    vim.g.gruvbox_material_diagnostic_virtual_text = 'colored'
    vim.cmd.colorscheme('gruvbox-material')
  end,
}



================================================
File: lua/plugins/lush.lua
================================================
return {
  "rktjmp/lush.nvim",
  { dir = "/Users/synoet/dev/mycelium-nvim/", lazy = false },
}



================================================
File: lua/plugins/mason.lua
================================================
if true then return {} end -- WARN: REMOVE THIS LINE TO ACTIVATE THIS FILE

-- Customize Mason plugins

---@type LazySpec
return {
  -- use mason-lspconfig to configure LSP installations
  {
    "williamboman/mason-lspconfig.nvim",
    -- overrides `require("mason-lspconfig").setup(...)`
    opts = {
      ensure_installed = {
        "lua_ls",
        -- add more arguments for adding more language servers
      },
    },
  },
  -- use mason-null-ls to configure Formatters/Linter installation for null-ls sources
  {
    "jay-babu/mason-null-ls.nvim",
    -- overrides `require("mason-null-ls").setup(...)`
    opts = {
      ensure_installed = {
        "stylua",
        -- add more arguments for adding more null-ls sources
      },
    },
  },
  {
    "jay-babu/mason-nvim-dap.nvim",
    -- overrides `require("mason-nvim-dap").setup(...)`
    opts = {
      ensure_installed = {
        "python",
        -- add more arguments for adding more debuggers
      },
    },
  },
}



================================================
File: lua/plugins/multi-cursor.lua
================================================
return {
  "jake-stewart/multicursor.nvim",
  branch = "1.0",
  config = function()
    local mc = require "multicursor-nvim"

    mc.setup()

    local set = vim.keymap.set

    -- Add or skip cursor above/below the main cursor.
    set({ "n", "v" }, "<up>", function() mc.lineAddCursor(-1) end)
    set({ "n", "v" }, "<down>", function() mc.lineAddCursor(1) end)
    set({ "n", "v" }, "<leader><up>", function() mc.lineSkipCursor(-1) end)
    set({ "n", "v" }, "<leader><down>", function() mc.lineSkipCursor(1) end)

    -- Add or skip adding a new cursor by matching word/selection
    set({ "n", "v" }, "<leader>n", function() mc.matchAddCursor(1) end)
    set({ "n", "v" }, "<leader>s", function() mc.matchSkipCursor(1) end)
    set({ "n", "v" }, "<leader>N", function() mc.matchAddCursor(-1) end)
    set({ "n", "v" }, "<leader>S", function() mc.matchSkipCursor(-1) end)

    -- Add all matches in the document
    set({ "n", "v" }, "<leader>A", mc.matchAllAddCursors)

    -- You can also add cursors with any motion you prefer:
    -- set("n", "<right>", function()
    --     mc.addCursor("w")
    -- end)
    -- set("n", "<leader><right>", function()
    --     mc.skipCursor("w")
    -- end)

    -- Rotate the main cursor.
    set({ "n", "v" }, "<left>", mc.nextCursor)
    set({ "n", "v" }, "<right>", mc.prevCursor)

    -- Delete the main cursor.
    set({ "n", "v" }, "<leader>x", mc.deleteCursor)

    -- Add and remove cursors with control + left click.
    set("n", "<c-leftmouse>", mc.handleMouse)

    -- Easy way to add and remove cursors using the main cursor.
    set({ "n", "v" }, "<c-q>", mc.toggleCursor)

    -- Clone every cursor and disable the originals.
    set({ "n", "v" }, "<leader><c-q>", mc.duplicateCursors)

    set("n", "<esc>", function()
      if not mc.cursorsEnabled() then
        mc.enableCursors()
      elseif mc.hasCursors() then
        mc.clearCursors()
      else
        -- Default <esc> handler.
      end
    end)

    -- bring back cursors if you accidentally clear them
    set("n", "<leader>gv", mc.restoreCursors)

    -- Align cursor columns.
    set("n", "<leader>a", mc.alignCursors)

    -- Split visual selections by regex.
    set("v", "S", mc.splitCursors)

    -- Append/insert for each line of visual selections.
    set("v", "I", mc.insertVisual)
    set("v", "A", mc.appendVisual)

    -- match new cursors within visual selections by regex.
    set("v", "M", mc.matchCursors)

    -- Rotate visual selection contents.
    set("v", "<leader>t", function() mc.transposeCursors(1) end)
    set("v", "<leader>T", function() mc.transposeCursors(-1) end)

    -- Jumplist support
    set({ "v", "n" }, "<c-i>", mc.jumpForward)
    set({ "v", "n" }, "<c-o>", mc.jumpBackward)

    -- Customize how cursors look.
    local hl = vim.api.nvim_set_hl
    hl(0, "MultiCursorCursor", { link = "Cursor" })
    hl(0, "MultiCursorVisual", { link = "Visual" })
    hl(0, "MultiCursorSign", { link = "SignColumn" })
    hl(0, "MultiCursorDisabledCursor", { link = "Visual" })
    hl(0, "MultiCursorDisabledVisual", { link = "Visual" })
    hl(0, "MultiCursorDisabledSign", { link = "SignColumn" })
  end,
}



================================================
File: lua/plugins/none-ls.lua
================================================
 ---@type LazySpec
    return {
      "nvimtools/none-ls.nvim",
      opts = function(_, opts)
        -- opts variable is the default configuration table for the setup function call
        local null_ls = require "null-ls"
        -- Check supported formatters and linters
        -- https://github.com/nvimtools/none-ls.nvim/tree/main/lua/null-ls/builtins/formatting
        -- https://github.com/nvimtools/none-ls.nvim/tree/main/lua/null-ls/builtins/diagnostics
        -- Only insert new sources, do not replace the existing ones
        -- (If you wish to replace, use `opts.sources = {}` instead of the `list_insert_unique` function)
        opts.sources = require("astrocore").list_insert_unique(opts.sources, {
          -- Set a formatter
          null_ls.builtins.formatting.stylua,
          null_ls.builtins.formatting.prettier.with {
            condition = function(utils)
              return utils.root_has_file {
                ".prettierrc",
                ".prettierrc.js",
                ".prettierrc.json",
                ".prettierrc.toml",
                ".prettierrc.yaml",
                ".prettierrc.yml",
              }
            end,
          },
          null_ls.builtins.formatting.biome.with {
            condition = function(utils) return utils.root_has_file "biome.json" end,
          },
        })
      end,
    }



================================================
File: lua/plugins/shipwright.lua
================================================
return {
  "rktjmp/shipwright.nvim",
}



================================================
File: lua/plugins/treesitter.lua
================================================
if true then return {} end -- WARN: REMOVE THIS LINE TO ACTIVATE THIS FILE

-- Customize Treesitter

---@type LazySpec
return {
  "nvim-treesitter/nvim-treesitter",
  opts = {
    ensure_installed = {
      "lua",
      "vim",
      -- add more arguments for adding more treesitter parsers
    },
  },
}



================================================
File: lua/plugins/user.lua
================================================
if true then return {} end -- WARN: REMOVE THIS LINE TO ACTIVATE THIS FILE

-- You can also add or configure plugins by creating files in this `plugins/` folder
-- Here are some examples:

---@type LazySpec
return {

  -- == Examples of Adding Plugins ==

  "andweeb/presence.nvim",
  {
    "ray-x/lsp_signature.nvim",
    event = "BufRead",
    config = function() require("lsp_signature").setup() end,
  },

  -- == Examples of Overriding Plugins ==

  -- customize alpha options
  {
    "goolord/alpha-nvim",
    opts = function(_, opts)
      -- customize the dashboard header
      opts.section.header.val = {
        " ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà",
        "‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà         ‚ñà‚ñà    ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà",
        "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà",
        "‚ñà‚ñà   ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà",
        "‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà",
        " ",
        "    ‚ñà‚ñà‚ñà‚ÄÅ   ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ   ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ñà‚ÄÅ   ‚ñà‚ñà‚ñà",
        "    ‚ñà‚ñà‚ñà‚ñà‚ÄÅ  ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ   ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ñà‚ñà‚ÄÅ ‚ñà‚ñà‚ñà‚ñà",
        "    ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ   ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ñà‚ñà‚ÄÅ‚ñà‚ñà",
        "    ‚ñà‚ñà‚ÄÅ‚ÄÅ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ‚ÄÅ‚ñà‚ñà‚ÄÅ ‚ñà‚ñà‚ÄÅ‚ÄÅ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ‚ÄÅ‚ñà‚ñà‚ÄÅ‚ÄÅ‚ñà‚ñà",
        "    ‚ñà‚ñà‚ÄÅ ‚ÄÅ‚ñà‚ñà‚ñà‚ñà‚ÄÅ ‚ÄÅ‚ñà‚ñà‚ñà‚ñà‚ÄÅ‚ÄÅ ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ ‚ÄÅ‚ÄÅ‚ÄÅ ‚ñà‚ñà",
      }
      return opts
    end,
  },

  -- You can disable default plugins as follows:
  { "max397574/better-escape.nvim", enabled = false },

  -- You can also easily customize additional setup of plugins that is outside of the plugin's setup call
  {
    "L3MON4D3/LuaSnip",
    config = function(plugin, opts)
      require "astronvim.plugins.configs.luasnip"(plugin, opts) -- include the default astronvim config that calls the setup call
      -- add more custom luasnip configuration such as filetype extend or custom snippets
      local luasnip = require "luasnip"
      luasnip.filetype_extend("javascript", { "javascriptreact" })
    end,
  },

  {
    "windwp/nvim-autopairs",
    config = function(plugin, opts)
      require "astronvim.plugins.configs.nvim-autopairs"(plugin, opts) -- include the default astronvim config that calls the setup call
      -- add more custom autopairs configuration such as custom rules
      local npairs = require "nvim-autopairs"
      local Rule = require "nvim-autopairs.rule"
      local cond = require "nvim-autopairs.conds"
      npairs.add_rules(
        {
          Rule("$", "$", { "tex", "latex" })
            -- don't add a pair if the next character is %
            :with_pair(cond.not_after_regex "%%")
            -- don't add a pair if  the previous character is xxx
            :with_pair(
              cond.not_before_regex("xxx", 3)
            )
            -- don't move right when repeat character
            :with_move(cond.none())
            -- don't delete if the next character is xx
            :with_del(cond.not_after_regex "xx")
            -- disable adding a newline when you press <cr>
            :with_cr(cond.none()),
        },
        -- disable for .vim files, but it work for another filetypes
        Rule("a", "a", "-vim")
      )
    end,
  },
}


